import os
import mysql.connector
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai

# Load environment variables
load_dotenv()

# Retrieve environment variables
API_KEY = os.getenv('GOOGLE_API_KEY')
TELEGRAM_API_KEY = os.getenv('TELEGRAM_API_KEY')
MYSQL_HOST = os.getenv('MYSQL_HOST')
MYSQL_USER = os.getenv('MYSQL_USER')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD')
MYSQL_DATABASE = os.getenv('MYSQL_DATABASE')

# Configure the Gemini API
genai.configure(api_key=API_KEY)

model = genai.GenerativeModel(model_name='gemini-pro')
chat = model.start_chat(history=[])

# Establish MySQL database connection
def get_db_connection():
    try:
        return mysql.connector.connect(
            host=MYSQL_HOST,
            user=MYSQL_USER,
            password=MYSQL_PASSWORD,
            database=MYSQL_DATABASE
        )
    except mysql.connector.Error as e:
        print(f"Error connecting to MySQL database: {e}")
        return None

# Define Telegram bot handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('Hello! Ask me anything.')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    question = update.message.text.strip()
    response_text = ""

    # Use generative model for response
    if question.strip() != '':
        response = chat.send_message(question)
        response_text = response.text
        # Save chat history to MySQL
        db_conn = get_db_connection()
        if db_conn is not None:
            try:
                with db_conn.cursor() as cursor:
                    cursor.execute("INSERT INTO chat_history (question, response) VALUES (%s, %s)", (question, response_text))
                db_conn.commit()
            except mysql.connector.Error as e:
                print(f"Error inserting chat history: {e}")
            finally:
                if db_conn.is_connected():
                    db_conn.close()
    else:
        response_text = 'Please ask a question.'

    await update.message.reply_text(response_text)

# Other bot commands and handlers (sites, count_offices, status, etc.)

# Main function to set up the Telegram bot
def main():
    # Set up the Application with your bot token
    application = ApplicationBuilder().token(TELEGRAM_API_KEY).build()

    # Register command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Run the bot
    application.run_polling()

if __name__ == '__main__':
    main()
